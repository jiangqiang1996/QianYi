package ${packageName}.domain;

import lombok.AllArgsConstructor;
import lombok.*;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
#foreach ($import in $importList)
import ${import};
#end
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import com.ruoyi.common.annotation.Excel;
#if($table.crud || $table.sub)
import com.baomidou.mybatisplus.annotation.*;
import com.ruoyi.common.core.domain.BaseDomain;
#elseif($table.tree)
import com.ruoyi.common.core.domain.TreeEntity;
#end

/**
 * ${functionName}对象 ${tableName}
 *
 * @author ${author}
 * @date ${datetime}
 */
#if($table.crud || $table.sub)
    #set($Entity="BaseDomain")
#elseif($table.tree)
    #set($Entity="TreeEntity")
#end
@Builder
@ApiModel
@Data
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(callSuper = true)
@TableName("${table.tableName}" )
public class ${ClassName} extends ${Entity} {
private static final long serialVersionUID=1L;

#foreach ($column in $columns)
    #if(!$table.isSuperColumn($column.javaField))
    /** $column.columnComment */
        #set($parentheseIndex=$column.columnComment.indexOf("（"))
        #if($parentheseIndex != -1)
            #set($comment=$column.columnComment.substring(0, $parentheseIndex))
        #else
            #set($comment=$column.columnComment)
        #end
        #if($parentheseIndex != -1)
        @Excel(name = "${comment}", readConverterExp = "$column.readConverterExp()")
        #elseif($column.javaType == 'Date')
        @JsonFormat(pattern = "yyyy-MM-dd")
        @Excel(name = "${comment}", width = 30, dateFormat = "yyyy-MM-dd")
        #else
        @Excel(name = "${comment}")
        #end
        #if($column.columnName == $pkColumn.columnName)
        @TableId(value = "$column.columnName", type = IdType.AUTO)
        #else
        @TableField("$column.columnName")
        #end
    @ApiModelProperty("${comment}")
    private $column.javaType $column.javaField ;
    #end
#end
#if($table.sub)
    /** $table.subTable.functionName信息 */
    @TableField(exist = false)
    private List<${subClassName}> ${subclassName}List;
#end

    @Override
    public String toString() {
        return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)
#foreach ($column in $columns)
#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
#set($AttrName=$column.javaField)
#else
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#end
            .append("${column.javaField}", get${AttrName}())
#end
#if($table.sub)
            .append("${subclassName}List", get${subClassName}List())
#end
        .toString();
    }
}
